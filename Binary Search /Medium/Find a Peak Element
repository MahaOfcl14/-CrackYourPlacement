int findMaxIndex(vector<vector<int>> &g, int n, int m, int col){
    int maxValue = -1, index = -1;
    for(int i=0; i<n; i++){
        if(g[i][col] > maxValue){
            maxValue = g[i][col];
            index = i;
        }
    }
    return index;
}
vector<int> findPeakGrid(vector<vector<int>> &g){
    // Write your code here. 
    int n = g.size();
    int m = g[0].size();   
    int low = 0, high = m-1;
    while(low <= high){
        int mid = (low+high)/2;
        int MaxRowIndex = findMaxIndex(g, n, m, mid);
        int left = mid-1 >= 0 ? g[MaxRowIndex][mid-1] : -1;
        int right = mid + 1 < m ? g[MaxRowIndex] [mid+1] : -1;
        if(g[MaxRowIndex] [mid] > left && g[MaxRowIndex] [mid] > right){
            return {MaxRowIndex, mid};
        }
        else if(g[MaxRowIndex] [mid] < left) high=mid-1;
        else low = mid+1;
    }
    return {-1,-1};
}
