int countPartition(vector<int>&a, int maxsum){
    int n = a.size();
    int partition = 1;
    long long subarraySum = 0;
    for(int i=0; i<n; i++){
        if(subarraySum + a[i] <= maxsum){
            subarraySum += a[i];
        }
        else{
            partition++;
            subarraySum = a[i];
        }
    }
    return partition;
}

int largestSubarraySumMinimized(vector<int> a, int k) {
  int low = *max_element(a.begin(), a.end());
  int high = accumulate(a.begin(), a.end(),0);
  while(low <= high){
      int mid = (low+high)/2;
      int partitions = countPartition(a,mid);
      if(partitions > k){
          low = mid+1;
      }
      else{
          high = mid-1;
      }
  }
  return low;
}
