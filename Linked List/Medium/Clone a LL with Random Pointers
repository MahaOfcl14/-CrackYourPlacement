/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 * 		Node *random;
 *		Node() : data(0), next(nullptr), random(nullptr){};
 *		Node(int x) : data(x), next(nullptr), random(nullptr) {}
 *		Node(int x, Node *next, Node *random) : data(x), next(next), random(random) {}
 * };
 */
 Node* insertInbetween(Node* head){
	 Node* temp = head;
	 while(temp!=NULL){
		 Node* nextElement = temp->next;
		 Node* copy = new Node(temp->data);
		 copy->next = nextElement;
		 temp->next = copy;

		 temp = nextElement;
	 }
 }
 Node* conectRandomPointer(Node* head){
	 Node* temp = head;
	 while(temp!=NULL){
		 Node* copyNode = temp->next;
		 if(temp->random){
			 copyNode->random = temp->random->next;
		 }
		 else{
			 copyNode->random = NULL;
		 }
		 temp = temp->next->next;
	 }
 }
 Node* getDeepCopy(Node* head){
	 Node* temp = head;
	 Node* dummyNode = new Node(-1);
	 Node* res = dummyNode;
	 while(temp!=NULL){
		 res->next = temp->next;
		 res = res->next;

		 temp->next = temp->next->next;
		 temp = temp->next;
	 }
	 return dummyNode->next;
 }

Node *cloneLL(Node *head){
	if(!head) return nullptr;
	insertInbetween(head);
	conectRandomPointer(head);
	return getDeepCopy(head);
}
