class Solution {
    private:
    vector<int>FindNSE(vector<int>& nums){
        int n = nums.size();
        vector<int>ans(n);
        stack<int>st;
        for(int i=n-1; i>=0; i--){
            int currEle = nums[i];
            while(!st.empty() && nums[st.top()] >= nums[i]){
                st.pop();
            }
            ans[i] = !st.empty() ? st.top() : n;
            st.push(i);
        }
        return ans;
    }
    vector<int>FindPSE(vector<int>&nums){
        int n = nums.size();
        vector<int>ans(n);
        stack<int>st;
        for(int i=0; i<n; i++){
            int currEle = nums[i];
            while(!st.empty() && nums[st.top()] > nums[i]){
                st.pop();
            }
            ans[i] = !st.empty() ? st.top() : -1;
            st.push(i);
        }
        return ans;
    }
    vector<int>FindNGE(vector<int>&nums){
        int n = nums.size();
        vector<int>ans(n);
        stack<int>st;
        for(int i=n-1; i>=0; i--){
            int currEle = nums[i];
            while(!st.empty() && nums[st.top()] <= nums[i]){
                st.pop();
            }
            ans[i] = !st.empty() ? st.top() : n;
            st.push(i);
        }
        return ans;

    }
       vector<int>FindPGEE(vector<int>&nums){
        int n = nums.size();
        vector<int>ans(n);
        stack<int>st;
        for(int i=0; i<n; i++){
            int currEle = nums[i];
            while(!st.empty() && nums[st.top()] < nums[i]){
                st.pop();
            }
            ans[i] = !st.empty() ? st.top() : -1;
            st.push(i);
        }
        return ans;
    }
long long sumSubarrayMins(vector<int>& nums){
    vector<int>nse = FindNSE(nums);
    vector<int>psee = FindPSE(nums);
    int n = nums.size();
    long long sum = 0; 
    for(int i=0;i<n;i++){
        int right = nse[i] - i;
        int left = i - psee[i];
        long long freq = left*right*1LL;
        long long val = freq*nums[i]*1LL;
        sum += val;
    }
    return sum;
}
long long sumSubarrayMaxs(vector<int>&nums){
    int n = nums.size();
    long long sum = 0;
    vector<int>nge = FindNGE(nums);
    vector<int>pgee = FindPGEE(nums);
    for(int i=0; i<n; i++){
        int right = nge[i] - i;
        int left = i - pgee[i];
        long long freq = left*right*1LL;
        long long val = freq*nums[i]*1LL;
        sum += val;
    }
    return sum;
}


public:
    long long subArrayRanges(vector<int> &nums) {
        return (sumSubarrayMaxs(nums)-sumSubarrayMins(nums));
      
    }
};

